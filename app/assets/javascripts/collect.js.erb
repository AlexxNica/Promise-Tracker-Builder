PT = PT || {};

PT.aggregatUrl = "<%= ENV['AGGREGATOR_URL'] %>";

PT.retrieveResponses = function(surveyCode, callBack){
  var url = PT.aggregatUrl + "/surveys/" + surveyCode + "/survey-with-responses";  
  $.get(url, function(data){
    PT.surveyDefinition = data.payload.survey;
    PT.responses = data.payload.responses;
    PT.aggregate = PT.aggregateData(data.payload);
    callBack(data.payload);
  });
};

PT.renderStatusBars = function(containerId, currentResponseCount, targetResponseCount){
  $(containerId).highcharts({
    chart: {
      type: "bar",
      margin: 0
    },
    title: {
      text: ""
    },
    xAxis: {
      lineColor: 'transparent',
      labels: {
        enabled: false
      }
    },
    yAxis: {
      gridLineColor: 'transparent',
      labels: {
        enabled: false
      }
    },
    tooltip: {
      valueSuffix: " " + I18n.t("campaigns.collect.responses.counting.other"),
      headerFormat: ""
    },
    legend: {
      enabled: false
    },
    plotOptions: {
        bar: {
            dataLabels: {
                enabled: true
            }
        }
    },
    credits: {
      enabled: false
    },
    series: [
      {
        name: I18n.t("campaigns.collect.target"),
        data: [targetResponseCount],
        pointPadding: 0,
        groupPadding: 0,
        color: "#5fb2a6",
      },
      {
        name: I18n.t("campaigns.collect.current"),
        data: [currentResponseCount],
        pointPadding: 0,
        groupPadding: 0,
        color: "#66c6ba"
      }
    ],
    exporting: {
      enabled: false
    }
  });
};

PT.renderActivityGraph = function(responses, containerId){
  var $container, height, width, margins, responsesByDay, svg, graph, 
      xAxis, yAxis, line, startLine, plotPoints, xExtent, x, y;

  $container = $(containerId);
  $container.empty();
  height = 250;
  width = $container.width();
  margins = {
    x: 60,
    y: 45
  };
  responsesByDay = PT.groupResponsesByDay(responses);

  svg = d3.select(containerId).append('svg')
      .attr('width', width)
      .attr('height', height);

  graph = svg.append('g')
      .attr("class", "graph-activity")
      .attr("transform", "translate(30, 20)");

  x = d3.time.scale().range([0, (width - margins.x)]);
  y = d3.scale.linear().range([(height - margins.y), 0]);

  xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom")
      .tickSize(height - margins.y)
      .tickPadding(10)
      .ticks(d3.time.day, 1)
      .tickFormat(d3.time.format('%d %b'));

  yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .tickSize(width - margins.x)
      .tickPadding(10)
      .ticks(5);

  startLine = d3.svg.line()
      .x(function(d) { return x(new Date(d.key)); })
      .y(height);

  line = d3.svg.line()
      .x(function(d) { return x(new Date(d.key)); })
      .y(function(d) { return y(d.values.length); });

  plotPoints = function(responsesByDay){
    graph.append("path")
      .datum(responsesByDay)
      .attr("class", "activity-line")
      .attr("d", startLine)
      .transition()
      .duration(700)
      .attr("d", line);

    graph.append("g")
        .attr("class", "data-points")
        .selectAll("circle")
      .data(responsesByDay)
        .enter()
        .append("circle")
          .attr("class", "point")
          .attr("r", 5)
          .attr("cx", function(d) { return x(new Date(d.key)); })
          .attr("cy", height)
          .transition()
          .duration(700)
          .attr("cy", function(d) { return y(d.values.length); })
  };

  if(responsesByDay.length > 0) {
    xExtent = d3.extent(responsesByDay, function(d) { return new Date(d.key); });
  } else {
    xExtent = [new Date(Date.now()).setHours(0,0,0,0), new Date(Date.now()).setHours(0,0,0,0)];
  }
  x.domain([d3.time.day.offset(xExtent[0], -1), d3.time.day.offset(xExtent[1], 5)]);
  y.domain([0, d3.max(responsesByDay, function(d) { return d.values.length; }) + 10 || 10])
  
  graph.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0,0)")
    .call(xAxis);

  graph.append("g")
    .attr("class", "y axis")
    .attr("transform", "translate(0" + (width - margins.x) + ",0)")
    .call(yAxis);

  plotPoints(responsesByDay);
};

PT.renderResponseTable = function(survey, responses){
  var $table = $("#response-table");
  var sorted = responses.sort(function(a,b){
    return b.timestamp - a.timestamp;
  });

  PT.renderResponseRows(sorted.slice(0, 10), $table);
  $("#response-view").append(HandlebarsTemplates["response_view"](survey));
  responses.length > 0 ? PT.viewResponse(sorted[0]) : false;

  if(responses.length > 10){
    $("#view-more").on("click", function(){
      PT.loadMoreResponses(sorted);
    });
  } else {
    $("#view-more").hide();
  }
};

PT.renderResponseRows = function(responses, $table){
  responses.forEach(function(response){
    var $row = $(HandlebarsTemplates["response_table_row"](response));
    $row.on("click", function(){
      PT.viewResponse(response);
    });
    $table.append($row);
  });
}

PT.formatAnswer = function(answer){
  if(answer.value){
    switch(answer.input_type){
      case "location":
        return answer.value.lat ? answer.value.lat + ", " + answer.value.lon : "";
        break;
      case "select_many":
        return answer.value.join(", ");
        break;
      case "image":
        return "<img src='" + answer.value + "'/>";
      default:
        return answer.value;
        break;
    };
  }
};

PT.viewResponse = function(response){
  $("#response-table tr").removeClass("active");
  $("#response-table tr#" + response.id).addClass("active");
  response.answers.forEach(function(answer){
    $("#" + answer.id + " .answer").html(PT.formatAnswer(answer));
  });
};

PT.loadMoreResponses = function(sortedResponses){
  var $table = $("#response-table");
  var currentLength = $table.find(".response").length;

  PT.renderResponseRows(sortedResponses.slice(currentLength, currentLength + 10), $table);

  if(currentLength + 10 >= sortedResponses.length){
    $("#view-more").hide();
  }
};

PT.groupResponsesByDay = function(responses){
  return d3.nest()
    .key(function(d) {
      var day = new Date(d.timestamp).setHours(0, 0, 0, 0)
      return new Date(day);
    })
    .entries(responses);
};
