var PT = PT || {};

PT.colors = [
  "#66c6ba",
  "#f5be59", 
  "#ea7669", 
  "#545757", 
  "#42847b", 
  "#efa9a3",
  "#e6e7e8",
  "#000000"
];

// Aggregate data

PT.getSurveyInputById = function(surveyDefinition, inputId) {
  for(var i = 0; i< surveyDefinition.inputs.length; i++) {
    if(surveyDefinition.inputs[i].id == inputId) return surveyDefinition.inputs[i];
  }
};

PT.getAnswerById = function(response, inputId) {
  for(var i = 0; i< response.answers.length; i++) {
    if(response.answers[i].id == inputId) return response.answers[i];
  }
};

PT.getAnswersById = function(responses, inputId){
  var answers = [];
  for(var i = 0; i<responses.length; i++) {
    answers.push(PT.getAnswerById(responses[i], inputId).value);
  }

  return answers;
}

PT.count = function(responses, inputId) { //Count responses by value
  var counts = {};
  for(var i = 0; i< responses.length; i++) {
    var value = PT.getAnswerById(responses[i], inputId).value;
    counts[value] = counts[value] ? counts[value]+1 : 1;
  }
  return counts;
};

PT.aggregateAnswers = function(responses, inputId){ //Collect answers for text and image
  var answers = [];

  if(inputId){
    responses.forEach(function(response){
      var relevantAnswer = response.answers.filter(function(answer){
        if(answer.id == inputId){
          if(answer.value && answer.value.length > 0){
            var item = answer;
            item.parentResponse = response;
            return item;
          }
        }
      })[0];

      relevantAnswer ? PT.separateMultipleEntries(relevantAnswer, response, answers) : false;
    });
  } else {
    answers = PT.extractAllImages(responses);
  }

  return answers;
};

PT.separateMultipleEntries = function(answer, response, answersArray){
  var formatAnswer = function(value){
    return {
      value: value,
      parentResponse: response,
      type: answer.input_type
    }
  };

  if(answer.value.constructor === Array){ // Support new multiple image answer
    answer.value.forEach(function(value){
      answersArray.push(formatAnswer(value));
    });
  } else { // Support old single image answer
    answersArray.push(formatAnswer(answer.value));
  }
};

PT.extractAllImages = function(responses){
  var images = [];

  responses.forEach(function(response){
    response.answers.forEach(function(answer){
      if(answer.input_type == "image" && answer.value){
        PT.separateMultipleEntries(answer, response, images)
      }
    })
  });

  return images;
};

// Render visualizations

PT.renderGoogleMap = function(serverResponse, containerId){
  var markers = [];
  var surveyDefinition = {};
  var map = null,
      infoWindow = null;
  var $container;

  var attachMarkerClickEvent = function(marker, response){
    var markerInfo = {
      id: response.id,
      image: null,
      displayableAnswers: {}
    };

    // 1. Browse through answers, extract image and responses
    for(var i=0,len=response.answers.length;i<len;i++){
      var answer = response.answers[i];
      switch(answer.input_type){
        case "location":
          break;
        case "image":
          if(typeof answer.value!=="undefined" && answer.value){
            markerInfo.image = answer.value;
          }
          break;
        default:
          markerInfo.displayableAnswers[surveyDefinition[answer.id]] = answer.value || "";
      }
    }

    // 2. Build marker popup template and attach listener
    google.maps.event.addListener(marker, "click", function(){
      infoWindow.setContent(HandlebarsTemplates["map_info_window"](markerInfo));
      infoWindow.open(map, marker);
    });
  };

  window.mapInit = function(){
    // Start initialization, create map
    var mapOptions = {
      zoom: 8,
      center: new google.maps.LatLng(-34.397, 150.644),
      scrollwheel: false
    };
    map = new google.maps.Map(document.getElementById(containerId), mapOptions);
    infoWindow = new google.maps.InfoWindow({
        content: ""
    });

    // Store survey definition
    var surveyInputs = serverResponse.survey.inputs;
    for(var i=0,len=surveyInputs.length;i<len;i++){
      var input = surveyInputs[i];
      surveyDefinition[input.id] = input.label;
    }

    // Create map markers
    var surveyResponses = serverResponse.responses;
    for(var i=0,len=surveyResponses.length;i<len;i++){
      var response = surveyResponses[i];

      // Find geo location
      var lat = null,
          lon = null;
      for(var j=0,len2=response.answers.length;j<len2;j++){
        var answer = response.answers[j];
        if(typeof answer.input_type!=="undefined" && answer.input_type=="location" && typeof answer.value!=="undefined" && typeof answer.value.lon!=="undefined"){
          lat = answer.value.lat;
          lon = answer.value.lon;
          break;
        }
      }
      if(lat==null || lon==null){
        if(response.locationstamp && response.locationstamp.lat !== "undefined" && response.locationstamp.long !== "undefined"){
          lat = response.locationstamp.lat;
          lon = response.locationstamp.lon;
        } else {
          continue; // Find if next response is a geolocation
        }
      }

      // Create marker
      if(lat && lon){
        var marker = new google.maps.Marker({
          map: map,
          position: new google.maps.LatLng(lat, lon)
        });
        markers.push(marker);

        attachMarkerClickEvent(marker, response);
      }
    }

    // Scale map viewport to include all markers
    var points = $.map(markers, function(a){
        return a.getPosition();
    });
    var bounds = new google.maps.LatLngBounds();
    for(var i=0;i<points.length;i++){
        bounds.extend(points[i]);
    }
    
    map.fitBounds(bounds);

    $("#map-tab").on("shown.bs.tab", function(){
      google.maps.event.trigger(map, "resize");
      map.fitBounds(bounds);
    });

  };

  // Load map script

  if(typeof google === "undefined"){
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "https://maps.googleapis.com/maps/api/js?v=3.exp&" +
        "callback=mapInit&key=" + "<%= ENV['GOOGLE_MAPS_KEY'] %>";
    document.body.appendChild(script);
  } else {
    window.mapInit();
  }
};

PT.renderGallery = function(responses, containerId, galleryName, inputId){
  var $container = $(containerId);
  var images = PT.aggregateAnswers(responses, inputId);

  if(images.length > 0){
    $container.empty();
    
    images.forEach(function(image, index){
      // Ensure no local image uploads are included
      if(image.value.slice(0,4) !== "file"){
        var $a = $("<a/>");
        var $image = $("<div/>", {class: "gallery-image"});

        $a.attr("href", image.value);
        $a.attr("data-lightbox", galleryName);
        $image.css("background", "url(" + image.value + ") no-repeat center center");
        $image.css("background-size", "cover");
        $a.append($image);
        $container.append($a);
      }
    });
  }
};

PT.renderText = function(responses, inputId, containerId){
  var $container = $(containerId).addClass("text");
  var $textBlock;
  var answers = PT.aggregateAnswers(responses, inputId);

  answers.forEach(function(item, index){
    $textBlock = $("<span/>", {class: "text-viz"}).html(item.value);
    $textBlock.css("color", PT.colors[(index % PT.colors.length)]);
    $textBlock.css("font-size", Math.floor(Math.random(5) * 10 + 12) + "px");
    $container.append($textBlock);

    $textBlock.on("click", function(event){
      PT.showResponsePopup(event, item.parentResponse, PT.surveyDefinition);
    });
  });
};

PT.renderDate = function(containerId, responses, inputId) {
  $(containerId).css({height: "250px", margin: "0 auto"});
  var counts = PT.count(responses, inputId);
  // convert counts to array
  var dates = [];
  for(var key in counts) {
    if(key !== "undefined"){
      dates.push([parseInt(Date.parse(key)), counts[key]])
    }
  }
  dates.sort(function (a, b) {return a[0] - b[0]})

  // plot
  $(containerId).highcharts({
    chart: {
      type: 'column'
    },
    title: {
      text: ''
    },
    xAxis: {
      type: 'datetime',
      dateTimeLabelFormats: { // don't display the dummy year
        month: '%e. %b',
        year: '%b'
      },
      title: {
        text: I18n.t("campaigns.collect.date")
      }
    },
    yAxis: {
      title: {
        text: I18n.t("campaigns.collect.number_of_responses")
      },
      min: 0
    },
    tooltip: {
      headerFormat: '',
      pointFormat: '{point.x:%e/%b}: {point.y}'
    },
    colors: PT.colors,
    series: [{
      showInLegend: false, 
      data: dates
    }],
    credits: {
      enabled: false
    }
  })
};

PT.renderMapForLocationQuestion = function(responses, $div, input){

  // Find input's index in responses
  if(responses.length <= 0) return;  // Quit if no response
  var inputIndex = _.findIndex(responses[0].answers, function(element, index, array){
    return element.id == input.id
  });

  var answers = PT.getAnswersById(responses, input.id);

  var validAnswers = answers.filter(function(el){
    return el.value && el.value.lat && el.value.lon;
  });

  var markerData = [{
    color: PT.colors[1],
    points: validAnswers.map(function(el){
              return {
                lon: el.value.lon,
                lat: el.value.lat,
                data: el.parentResponse
              }
            })
  }];

  $div.empty();
  var $canvas = $('<canvas width="'+$div.innerWidth()+'" height="'+$div.innerHeight()+'"/>').appendTo($div);

  $canvas.osmStaticMap({
    url: "http://s.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",
    circleRadius: 8,
    markers: markerData,
    interactive: true,
    click: function(event, p){
      console.log(p[0].data.data);
      PT.showResponsePopup(event, p[0].data.data);
    }
  });
};

PT.renderInputSummaries = function(responses, containerId, graphClass, callback){
  if(responses.length > 0){
    var $container = $(containerId);
    var $vizBox, $graphSquare, $map;

    $container.empty();

    PT.surveyDefinition.inputs.forEach(function(input){
      $container.append(HandlebarsTemplates["input_viz"](input));
      $vizBox = $("#viz-input-" + input.id);

      switch(input.input_type){
        case "select":
        case "select1":
          $graphSquare = $("<div/>", {id: "graph-" + input.id, class: "graph-square " + graphClass});
          $vizBox.append($graphSquare);

          if(input.options.length < 3){
            PT.renderPieChart("#graph-" + input.id, responses, input.id, true, true);
          } else {
            PT.renderColumnChart("#graph-" + input.id, responses, input.id, true, true);
          };

          break;

        case "location":
          $map = $("<div/>", {class: "col-md-12 graph-square map-" + input.id});
          $vizBox.append($map);
          PT.renderMapForLocationQuestion(responses, $map, input);
          break;

        case "text":
          PT.renderText(responses, input.id, "#viz-input-" + input.id);
          break;

        case "date":
          PT.renderDate("#viz-input-" + input.id, responses, input.id)

        case "number":
        // case "date":
          // Render histogram?
          break;

        case "image":
          $vizBox.addClass("image");
          PT.renderGallery(responses, "#viz-input-" + input.id, "gallery-" + input.id, input.id);
          break;
      }
    })
  } else {
    $("#graph-placeholder").show();
  }
  $(window).resize();
};

PT.renderGraphs = function(responses, containerId, graphClass){
  if(responses.length > 0){
    var $container = $(containerId), $graphSquare;

    $("#graph-placeholder").hide();
    $container.empty();

    PT.surveyDefinition.inputs.forEach(function(input){
      if(input.type == "select" || input.type == "select1"){
        $graphSquare = $(document.createElement("div"));

        $graphSquare.addClass(graphClass + " graph-square item");
        $graphSquare.attr("id", "graph-" + input.id)
        $container.append($graphSquare);

        switch(input.type){
          case "select1":
            PT.renderPieChart("#graph-" + input.id, responses, input.id, false, true)
            break;

          case "select":
            PT.renderColumnChart("#graph-" + input.id, responses, input.id, false, true)
            break;
        }
      }
    })

    // Show first item in graph carousel
    $(containerId + " .item").first().addClass("active");
    $(window).resize();
    if($(".carousel .item").length < 2){
      $(".carousel-control").hide();
    }
  }
};

PT.renderPieChart = function(containerId, responses, inputId, titleDisabled, download){
  var title, label;
  var counts = PT.count(responses, inputId);
  var values = [];
  for(var key in counts) {
    key !== "undefined" ? label = key : label = I18n.t("campaigns.share.none");
    values.push({name: label, y:counts[key]})
  }

  titleDisabled ? title = "" : title = PT.getSurveyInputById(PT.surveyDefinition, inputId).label;
  // plot
  $(containerId).highcharts({
    chart: {
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false,
      type: 'pie'
    },
    title: {
      text: title
    },
    colors: PT.colors,
    tooltip: {
      formatter: function(){
        return "<b>" + Highcharts.numberFormat(this.point.percentage, 1) + "%</b><br><span style='color: grey; font-size: .9em;'>(" + this.point.y + " " + I18n.t("campaigns.collect.responses.counting", {count: this.point.y}) + ")</span>"
      }
    },
    credits: {
      enabled: false
    },
    plotOptions: {
      pie: {
        allowPointSelect: true,
        cursor: "pointer",
        dataLabels: {
          enabled: true,
          format: "<b>{point.name}</b>: {point.percentage:.0f} %",
          style: {
              color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || "black",
              width: "120px"
          },
          distance: 1
        }
      }
    },

    series: [{
        name: 'registros',
        colorByPoint: true,
        data: values
    }]
  });
};

PT.renderColumnChart = function(containerId, responses, inputId, titleDisabled, download){
  var title, label;
  var counts = PT.count(responses, inputId);
  var series = [];
  for(var key in counts){
    key !== "undefined" ? label = key : label = I18n.t("campaigns.share.none");
    series.push({
      name: label, 
      data: [counts[key]]
    });
  };

  titleDisabled ? title = "" : title = PT.getSurveyInputById(PT.surveyDefinition, inputId).label;

  $(containerId).highcharts({
    chart: {
      type: "column",
      plotBackgroundColor: null,
      plotShadow: false
    },
    colors: PT.colors,
    title: {
      text: title
    },
    tooltip: {
      headerFormat: "{point.series.name}",
      pointFormat: "<br><b>{point.y} " + I18n.t("campaigns.collect.responses.counting.other") + "</b>"
    },
    credits: {
      enabled: false
    },
    xAxis: {
      type: 'category',
      lineColor: "transparent",
      tickWidth: 0,
      labels: {
        enabled: false
      }
    },
    yAxis: {
      allowDecimals: false,
      title: {
        text: ""
      }
    },
    plotOptions: {
      column: {
        allowPointSelect: true,
        cursor: "pointer",
        pointPadding: .25,
        borderWidth: 0,
        dataLabels: {
          enabled: false,
        }
      }
    },
    series: series,
    exporting: {
      enabled: download
    },
    navigation: {
      buttonOptions: {
        verticalAlign: "bottom",
        x: -60
      }
    }
  });
};

// Map popup window for single response
PT.showResponsePopup = function(event, response){
  event.stopPropagation();

  $(".response-container-outer").css({
    position: "absolute",
    top: event.pageY + 15,
    left: event.pageX - 50,
    width: window.innerWidth / 3 + "px"
  });

  PT.viewResponse(response);
  $(".response-container-outer").show();
};

// Profile page data section
$(function(){
  $(".carousel").carousel({
    pause: true,
    interval: false
  });

  // Hide carousel controls on first and last slide
  $(".carousel").on("slid.bs.carousel", function() {
    var $active = $(".carousel .item.active");
    $(window).resize();

    if($active.is(":first-child")){
      $(".carousel-control.left").fadeOut();
      $(".carousel-control.right").fadeIn();
    } else if($active.is(":last-child")) {
      $(".carousel-control.right").fadeOut();
      $(".carousel-control.left").fadeIn();
    } else {
      $(".carousel-control").fadeIn();
    }
  });

  $(document).ajaxSend(function(event, request, settings) {
    $(".ajax-loading").show();
  });

  $(document).ajaxComplete(function(event, request, settings) {
    $(".ajax-loading").hide();
  });
});
